swagger: '2.0'
info:
  description: >-
    This is REST API for Book-IT.
  version: 1.0.0
  title: Book-IT
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: fanderson75@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    # TEsting 
    #Again
host: petbooking.swagger.io
basePath: /v1
tags:
  - name: resources
    description: Operations about resources
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: bookings
    description: Operations about bookings
  - name: user
    description: Operations about users
    externalDocs:
      description: Find out more about booking
      url: 'http://swagger.io'
schemes:
  - https
  - http
paths:
  /resources:
    post:
      tags:
        - resources
      summary: Add a new resource
      description: ''
      operationId: addResource
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Resource object that needs to be added to the booking
          required: true
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '405':
          description: Invalid input
      security:
        - bookit_auth:
            - 'write:resources'
            - 'read:resources'
  '/resources/{resourceId}':
    get:
      tags:
        - resources
      summary: Find resource by ID
      description: Returns a single resource
      operationId: getResourceById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: resourceId
          in: path
          description: ID of resource to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Resource'
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
      security:
        - api_key: []
    put:
      tags:
        - resources
      summary: Update an existing resource
      description: ''
      operationId: updateResource
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: resourceId
          in: path
          description: ID of resource to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Resource object that needs to be added 
          required: true
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
        '405':
          description: Validation exception
      security:
        - bookit_auth:
            - 'write:resources'
            - 'read:resources'
    post:
      tags:
        - resources
      summary: Updates a resource with form data
      description: ''
      operationId: updateResourceWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: resourceId
          in: path
          description: ID of resource that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the resource
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the resource
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - bookit_auth:
            - 'write:resources'
            - 'read:resources'
    delete:
      tags:
        - resources
      summary: Deletes a resource
      description: ''
      operationId: deleteResource
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: resourceId
          in: path
          description: Resource id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Resource not found
      security:
        - bookit_auth:
            - 'write:resources'
            - 'read:resources'
  /bookings:
    post:
      tags:
        - bookings
      summary: Place a booking for a resource
      description: ''
      operationId: placeBooking
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: booking placed for resource
          required: true
          schema:
            $ref: '#/definitions/Booking'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Booking'
        '400':
          description: Invalid Booking
  /bookings/:
    get:
      tags:
        - bookings
      summary: Returns bookings
      description: Returns a map of bookings
      operationId: getBookings
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  '/bookings/{bookingId}':
    get:
      tags:
        - bookings
      summary: Find booking by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getBookingById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: bookingId
          in: path
          description: ID of resource that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Booking'
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
    delete:
      tags:
        - bookings
      summary: Delete booking by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteBooking
      produces:
        - application/xml
        - application/json
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  bookit_auth:
    type: oauth2
    authorizationUrl: 'http://petbooking.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:resources': modify resources in your account
      'read:resources': read your resources
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Booking:
    type: object
    properties:
      id:
        type: integer
        format: int64
      resourceId:
        type: integer
        format: int64
      fromDate:
        type: string
        format: date-time
      toDate:
        type: string
        format: date-time
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
  Resource:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: doggie
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
